"""autogenerated by genpy from ardrone_test/Send.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Send(genpy.Message):
  _md5sum = "e4f1b7bac35fec1113ab457a402d9ef0"
  _type = "ardrone_test/Send"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32 aat_pitch
float32 aat_roll
float32 aat_yaw
float32 aat_ax
float32 aat_ay
float32 aat_az

int32 aat_alt
int32 aat_temp

string textos

"""
  __slots__ = ['aat_pitch','aat_roll','aat_yaw','aat_ax','aat_ay','aat_az','aat_alt','aat_temp','textos']
  _slot_types = ['float32','float32','float32','float32','float32','float32','int32','int32','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       aat_pitch,aat_roll,aat_yaw,aat_ax,aat_ay,aat_az,aat_alt,aat_temp,textos

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Send, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.aat_pitch is None:
        self.aat_pitch = 0.
      if self.aat_roll is None:
        self.aat_roll = 0.
      if self.aat_yaw is None:
        self.aat_yaw = 0.
      if self.aat_ax is None:
        self.aat_ax = 0.
      if self.aat_ay is None:
        self.aat_ay = 0.
      if self.aat_az is None:
        self.aat_az = 0.
      if self.aat_alt is None:
        self.aat_alt = 0
      if self.aat_temp is None:
        self.aat_temp = 0
      if self.textos is None:
        self.textos = ''
    else:
      self.aat_pitch = 0.
      self.aat_roll = 0.
      self.aat_yaw = 0.
      self.aat_ax = 0.
      self.aat_ay = 0.
      self.aat_az = 0.
      self.aat_alt = 0
      self.aat_temp = 0
      self.textos = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_6f2i.pack(_x.aat_pitch, _x.aat_roll, _x.aat_yaw, _x.aat_ax, _x.aat_ay, _x.aat_az, _x.aat_alt, _x.aat_temp))
      _x = self.textos
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 32
      (_x.aat_pitch, _x.aat_roll, _x.aat_yaw, _x.aat_ax, _x.aat_ay, _x.aat_az, _x.aat_alt, _x.aat_temp,) = _struct_6f2i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.textos = str[start:end].decode('utf-8')
      else:
        self.textos = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_6f2i.pack(_x.aat_pitch, _x.aat_roll, _x.aat_yaw, _x.aat_ax, _x.aat_ay, _x.aat_az, _x.aat_alt, _x.aat_temp))
      _x = self.textos
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 32
      (_x.aat_pitch, _x.aat_roll, _x.aat_yaw, _x.aat_ax, _x.aat_ay, _x.aat_az, _x.aat_alt, _x.aat_temp,) = _struct_6f2i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.textos = str[start:end].decode('utf-8')
      else:
        self.textos = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_6f2i = struct.Struct("<6f2i")
