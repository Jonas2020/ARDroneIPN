/* Auto-generated by genmsg_cpp for file /home/stealth/rosfuerte_workspace/ardrone_test/msg/Control.msg */
#ifndef ARDRONE_TEST_MESSAGE_CONTROL_H
#define ARDRONE_TEST_MESSAGE_CONTROL_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace ardrone_test
{
template <class ContainerAllocator>
struct Control_ {
  typedef Control_<ContainerAllocator> Type;

  Control_()
  : magnitud(0.0)
  , direccion(0)
  {
  }

  Control_(const ContainerAllocator& _alloc)
  : magnitud(0.0)
  , direccion(0)
  {
  }

  typedef float _magnitud_type;
  float magnitud;

  typedef int32_t _direccion_type;
  int32_t direccion;


  typedef boost::shared_ptr< ::ardrone_test::Control_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ardrone_test::Control_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Control
typedef  ::ardrone_test::Control_<std::allocator<void> > Control;

typedef boost::shared_ptr< ::ardrone_test::Control> ControlPtr;
typedef boost::shared_ptr< ::ardrone_test::Control const> ControlConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::ardrone_test::Control_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::ardrone_test::Control_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace ardrone_test

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::ardrone_test::Control_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::ardrone_test::Control_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::ardrone_test::Control_<ContainerAllocator> > {
  static const char* value() 
  {
    return "8c4aeb72b566661fa1137b579e5a894f";
  }

  static const char* value(const  ::ardrone_test::Control_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x8c4aeb72b566661fULL;
  static const uint64_t static_value2 = 0xa1137b579e5a894fULL;
};

template<class ContainerAllocator>
struct DataType< ::ardrone_test::Control_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ardrone_test/Control";
  }

  static const char* value(const  ::ardrone_test::Control_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::ardrone_test::Control_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32 magnitud\n\
int32 direccion\n\
\n\
";
  }

  static const char* value(const  ::ardrone_test::Control_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::ardrone_test::Control_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::ardrone_test::Control_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.magnitud);
    stream.next(m.direccion);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Control_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ardrone_test::Control_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::ardrone_test::Control_<ContainerAllocator> & v) 
  {
    s << indent << "magnitud: ";
    Printer<float>::stream(s, indent + "  ", v.magnitud);
    s << indent << "direccion: ";
    Printer<int32_t>::stream(s, indent + "  ", v.direccion);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ARDRONE_TEST_MESSAGE_CONTROL_H

